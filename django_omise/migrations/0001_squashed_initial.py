# Generated by Django 3.2.13 on 2022-05-11 04:07

from django.conf import settings
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import uuid


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# django_omise.migrations.0012_auto_20220504_1907


def gen_uuid(apps, schema_editor):
    CardModel = apps.get_model("django_omise.Card")

    for row in CardModel.objects.all():
        row.uid = uuid.uuid4()
        row.save(
            update_fields=[
                "uid",
            ]
        )

    CustomerModel = apps.get_model("django_omise.Customer")

    for row in CustomerModel.objects.all():
        row.uid = uuid.uuid4()
        row.save(
            update_fields=[
                "uid",
            ]
        )

    ChargeModel = apps.get_model("django_omise.Charge")

    for row in ChargeModel.objects.all():
        row.uid = uuid.uuid4()
        row.save(
            update_fields=[
                "uid",
            ]
        )

    EventModel = apps.get_model("django_omise.Event")

    for row in EventModel.objects.all():
        row.uid = uuid.uuid4()
        row.save(
            update_fields=[
                "uid",
            ]
        )

    SourceModel = apps.get_model("django_omise.Source")

    for row in SourceModel.objects.all():
        row.uid = uuid.uuid4()
        row.save(
            update_fields=[
                "uid",
            ]
        )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Customer",
            fields=[
                (
                    "id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("livemode", models.BooleanField()),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="omise_customers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("data", models.JSONField(blank=True, default=dict)),
                ("uid", models.UUIDField(default=uuid.uuid4, null=True)),
            ],
            options={
                "ordering": ["-date_created"],
            },
        ),
        migrations.CreateModel(
            name="Source",
            fields=[
                (
                    "id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "amount",
                    models.IntegerField(
                        help_text="Source amount in smallest unit of source currency"
                    ),
                ),
                ("bank", models.CharField(blank=True, max_length=255)),
                (
                    "barcode",
                    models.CharField(
                        blank=True,
                        help_text="Source amount in smallest unit of source currency",
                        max_length=255,
                    ),
                ),
                (
                    "charge_status",
                    models.CharField(
                        choices=[
                            ("failed", "Failed"),
                            ("expired", "Expired"),
                            ("pending", "Pending"),
                            ("reverse", "Reversed"),
                            ("successful", "Successful"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="Status of charge created using this source (if any)",
                        max_length=10,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("USD", "United States Dollar"),
                            ("THB", "Thai Baht"),
                            ("SGD", "Singapore Dollar"),
                            ("JPY", "Japanese Yen"),
                            ("GBP", "Pound Sterling"),
                            ("EUR", "Euro"),
                            ("CNY", "Chinese Yuan"),
                            ("AUD", "Australian Dollar"),
                        ],
                        max_length=3,
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        blank=True, help_text="The payer's email", max_length=255
                    ),
                ),
                (
                    "flow",
                    models.CharField(
                        help_text="The payment flow payers need to go through to complete the payment. One of redirect, offline, or app_redirect",
                        max_length=50,
                    ),
                ),
                (
                    "installment_term",
                    models.IntegerField(
                        blank=True, help_text="Installment term in months", null=True
                    ),
                ),
                ("mobile_number", models.CharField(blank=True, max_length=50)),
                (
                    "name",
                    models.CharField(
                        blank=True, help_text="Payer's name", max_length=255
                    ),
                ),
                ("phone_number", models.CharField(blank=True, max_length=50)),
                (
                    "platform_type",
                    models.CharField(
                        blank=True,
                        help_text="Platform from which payer is making a payment. One of WEB, IOS, or ANDROID",
                        max_length=50,
                    ),
                ),
                ("receipt_amount", models.IntegerField(blank=True, null=True)),
                ("store_id", models.CharField(blank=True, max_length=255)),
                ("store_name", models.CharField(blank=True, max_length=255)),
                ("terminal_id", models.CharField(blank=True, max_length=255)),
                ("type", models.CharField(max_length=255)),
                (
                    "zero_interest_installments",
                    models.BooleanField(blank=True, null=True),
                ),
                ("data", models.JSONField(blank=True, default=dict)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("livemode", models.BooleanField()),
                ("uid", models.UUIDField(default=uuid.uuid4, null=True)),
            ],
            options={
                "ordering": ["-date_created"],
            },
        ),
        migrations.CreateModel(
            name="Card",
            fields=[
                (
                    "id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("livemode", models.BooleanField()),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cards",
                        to="django_omise.customer",
                    ),
                ),
                ("bank", models.CharField(blank=True, max_length=255)),
                ("brand", models.CharField(blank=True, max_length=255)),
                ("city", models.CharField(blank=True, max_length=255)),
                ("country", models.CharField(blank=True, max_length=255)),
                ("data", models.JSONField(blank=True, default=dict)),
                ("deleted", models.BooleanField(default=False)),
                ("expiration_month", models.CharField(blank=True, max_length=2)),
                ("expiration_year", models.CharField(blank=True, max_length=4)),
                ("financing", models.CharField(blank=True, max_length=10)),
                ("last_digits", models.CharField(max_length=4)),
                ("uid", models.UUIDField(default=uuid.uuid4, null=True)),
            ],
            options={
                "ordering": ["-date_created"],
            },
        ),
        migrations.CreateModel(
            name="Charge",
            fields=[
                (
                    "id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("livemode", models.BooleanField()),
                ("data", models.JSONField(blank=True, default=dict)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("failed", "Failed"),
                            ("expired", "Expired"),
                            ("pending", "Pending"),
                            ("reverse", "Reversed"),
                            ("successful", "Successful"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="Status of this charge.",
                        max_length=10,
                    ),
                ),
                (
                    "amount",
                    models.IntegerField(
                        help_text="Charge amount in the smallest unit of charge currency"
                    ),
                ),
                (
                    "authorize_uri",
                    models.CharField(
                        help_text="URI for payment authorization (e.g. 3-D Secure).",
                        max_length=255,
                    ),
                ),
                (
                    "authorized",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether charge has been authorized.",
                        null=True,
                    ),
                ),
                (
                    "capturable",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether charge is able to be captured (paid).",
                        null=True,
                    ),
                ),
                (
                    "capture",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether charge is set to be automatically captured (paid).",
                        null=True,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("USD", "United States Dollar"),
                            ("THB", "Thai Baht"),
                            ("SGD", "Singapore Dollar"),
                            ("JPY", "Japanese Yen"),
                            ("GBP", "Pound Sterling"),
                            ("EUR", "Euro"),
                            ("CNY", "Chinese Yuan"),
                            ("AUD", "Australian Dollar"),
                        ],
                        max_length=3,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("disputable", models.BooleanField(blank=True, null=True)),
                (
                    "expired",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether this charge has expired.",
                        null=True,
                    ),
                ),
                ("expired_at", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("failure_code", models.CharField(blank=True, max_length=255)),
                ("failure_message", models.TextField(blank=True)),
                ("fee", models.IntegerField()),
                ("fee_vat", models.IntegerField()),
                (
                    "funding_amount",
                    models.IntegerField(
                        blank=True,
                        help_text="For multi-currency charges, amount after exchange into account funding currency.",
                        null=True,
                    ),
                ),
                (
                    "funding_currency",
                    models.CharField(
                        choices=[
                            ("USD", "United States Dollar"),
                            ("THB", "Thai Baht"),
                            ("SGD", "Singapore Dollar"),
                            ("JPY", "Japanese Yen"),
                            ("GBP", "Pound Sterling"),
                            ("EUR", "Euro"),
                            ("CNY", "Chinese Yuan"),
                            ("AUD", "Australian Dollar"),
                        ],
                        max_length=3,
                    ),
                ),
                (
                    "interest",
                    models.IntegerField(
                        blank=True,
                        help_text="Interest paid by customer or merchant over the course of an installment term.",
                        null=True,
                    ),
                ),
                (
                    "interest_vat",
                    models.IntegerField(
                        blank=True,
                        help_text="Value-added Tax (VAT) applied to interest.",
                        null=True,
                    ),
                ),
                (
                    "ip",
                    models.CharField(
                        help_text="IP address provided to Omise at charge creation. May be IPv4 or IPv6.",
                        max_length=255,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Custom metadata for this charge.",
                    ),
                ),
                (
                    "net",
                    models.IntegerField(
                        help_text="funding_amount after fees, interest, and VAT deducted."
                    ),
                ),
                (
                    "paid",
                    models.BooleanField(
                        help_text="Whether charge has been captured (paid)."
                    ),
                ),
                ("paid_at", models.DateTimeField(blank=True, null=True)),
                (
                    "refundable",
                    models.BooleanField(
                        help_text="Whether charge is able to be refunded."
                    ),
                ),
                (
                    "refunded_amount",
                    models.IntegerField(
                        blank=True,
                        help_text="Refunded amount in smallest unit of currency.",
                        null=True,
                    ),
                ),
                (
                    "return_uri",
                    models.CharField(
                        blank=True,
                        help_text="URI to which customer is redirected after 3-D Secure card authorization or other redirect-based authorization.",
                        max_length=255,
                    ),
                ),
                (
                    "reversed",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether charge authorization is able to be reversed.",
                        null=True,
                    ),
                ),
                (
                    "voided",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether, in the case of a refund, charge was voided instead. Charges are voided if refund is processed before settlement time.",
                        null=True,
                    ),
                ),
                (
                    "zero_interest_installments",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether merchant absorbs the interest for installment payments; must match value in associated source.",
                        null=True,
                    ),
                ),
                (
                    "card",
                    models.ForeignKey(
                        blank=True,
                        help_text="Card that was charged (if card was charged).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="charges",
                        to="django_omise.card",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Customer associated with charge.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="charges",
                        to="django_omise.customer",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="charges",
                        to="django_omise.source",
                    ),
                ),
                ("uid", models.UUIDField(default=uuid.uuid4, null=True)),
            ],
            options={
                "ordering": ["-date_created"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("livemode", models.BooleanField()),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("card.destroy", "CARD_DESTROY"),
                            ("card.update", "CARD_UPDATE"),
                            ("charge.capture", "CHARGE_CAPTURE"),
                            ("charge.complete", "CHARGE_COMPLETE"),
                            ("charge.create", "CHARGE_CREATE"),
                            ("charge.expire", "CHARGE_EXPIRE"),
                            ("charge.reverse", "CHARGE_REVERSE"),
                            ("charge.update", "CHARGE_UPDATE"),
                            ("customer.create", "CUSTOMER_CREATE"),
                            ("customer.destroy", "CUSTOMER_DESTROY"),
                            ("customer.update", "CUSTOMER_UPDATE"),
                            ("customer.update.card", "CUSTOMER_UPDATE_CARD"),
                            ("dispute.accept", "DISPUTE_ACCEPT"),
                            ("dispute.close", "DISPUTE_CLOSE"),
                            ("dispute.create", "DISPUTE_CREATE"),
                            ("dispute.update", "DISPUTE_UPDATE"),
                            ("link.create", "LINK_CREATE"),
                            ("recipient.activate", "RECIPIENT_ACTIVATE"),
                            ("recipient.create", "RECIPIENT_CREATE"),
                            ("recipient.deactivate", "RECIPIENT_DEACTIVATE"),
                            ("recipient.destroy", "RECIPIENT_DESTROY"),
                            ("recipient.update", "RECIPIENT_UPDATE"),
                            ("recipient.verify", "RECIPIENT_VERIFY"),
                            ("refund.create", "REFUND_CREATE"),
                            ("schedule.create", "SCHEDULE_CREATE"),
                            ("schedule.destroy", "SCHEDULE_DESTROY"),
                            ("schedule.expire", "SCHEDULE_EXPIRE"),
                            ("schedule.expiring", "SCHEDULE_EXPIRING"),
                            ("schedule.suspend", "SCHEDULE_SUSPEND"),
                            ("transfer.create", "TRANSFER_CREATE"),
                            ("transfer.destroy", "TRANSFER_DESTROY"),
                            ("transfer.fail", "TRANSFER_FAIL"),
                            ("transfer.pay", "TRANSFER_PAY"),
                            ("transfer.send", "TRANSFER_SEND"),
                            ("transfer.update", "TRANSFER_UPDATE"),
                        ],
                        max_length=50,
                    ),
                ),
                ("data", models.JSONField(default=dict)),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("uid", models.UUIDField(default=uuid.uuid4, null=True)),
            ],
            options={
                "ordering": ["-date_created"],
            },
        ),
        migrations.RunPython(
            code=gen_uuid,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="card",
            name="uid",
            field=models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
        ),
        migrations.AlterField(
            model_name="charge",
            name="uid",
            field=models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
        ),
        migrations.AlterField(
            model_name="customer",
            name="uid",
            field=models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
        ),
        migrations.AlterField(
            model_name="event",
            name="uid",
            field=models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
        ),
        migrations.AlterField(
            model_name="source",
            name="uid",
            field=models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
        ),
        migrations.AddField(
            model_name="customer",
            name="deleted",
            field=models.BooleanField(
                default=False, help_text="Whether this customer was deleted."
            ),
        ),
        migrations.AlterField(
            model_name="card",
            name="deleted",
            field=models.BooleanField(
                default=False, help_text="Whethe this card was deleted."
            ),
        ),
        migrations.AlterField(
            model_name="card",
            name="customer",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="cards",
                to="django_omise.customer",
            ),
        ),
        migrations.AlterField(
            model_name="charge",
            name="card",
            field=models.ForeignKey(
                blank=True,
                help_text="Card that was charged (if card was charged).",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="charges",
                to="django_omise.card",
            ),
        ),
        migrations.AlterField(
            model_name="charge",
            name="customer",
            field=models.ForeignKey(
                blank=True,
                help_text="Customer associated with charge.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="charges",
                to="django_omise.customer",
            ),
        ),
        migrations.AlterField(
            model_name="charge",
            name="source",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="charges",
                to="django_omise.source",
            ),
        ),
        migrations.AlterField(
            model_name="charge",
            name="authorize_uri",
            field=models.CharField(
                blank=True,
                help_text="URI for payment authorization (e.g. 3-D Secure).",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="charge",
            name="ip",
            field=models.CharField(
                blank=True,
                help_text="IP address provided to Omise at charge creation. May be IPv4 or IPv6.",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="charge",
            name="return_uri",
            field=models.TextField(
                blank=True,
                help_text="URI to which customer is redirected after 3-D Secure card authorization or other redirect-based authorization.",
            ),
        ),
    ]
